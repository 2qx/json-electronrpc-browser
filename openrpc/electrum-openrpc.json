{
  "openrpc": "1.0.0",
  "info": {
    "version": "1.4.4-draft",
    "title": "Electrum Cash JSON-RPC",
    "description": "API specification for Electrum-Cash JSON-RPC",
    "license": {
      "name": "The MIT License (MIT)",
      "url": "https://raw.githubusercontent.com/2qx/json-electronrpc-browser/main/LICENSE"
    },
    "contact": {
      "name": "2qx",
      "url": "https://github.com/2qx/json-electronrpc-browser/issues"
    }
  },
  "servers": [
    {
      "url": "{protocol}://bch.imaginary.cash:{port}",
      "name": "imaginary",
      "variables": {
        "protocol": {
          "default": "wss",
          "enum": [
            "https",
            "wss"
          ],
          "description": "transport protocol"
        },
        "port": {
          "default": "50004",
          "enum": [
            "50002",
            "50004"
          ]
        }
      }
    }
  ],
  "methods": [
    {
      "name": "blockchain.address.get_balance",
      "summary": "Get address balance",
      "description": "Return the confirmed and unconfirmed balances of a Bitcoin Cash address.",
      "params": [
        {
          "$ref": "#/components/schemas/Address"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/Balances"
      },
      "examples": [
        {
          "name": "Check get an address balance",
          "params": [
            {
              "name": "blockchain.address.get_balance",
              "value": "qp6e6enhpy0fwwu7nkvlr8rgl06ru0c9lywalz8st5"
            }
          ],
          "result": {
            "name": "blockchain.address.get_balance",
            "value": [
              {
                "confirmed": 1313538732,
                "unconfirmed": 0
              }
            ]
          }
        }
      ],
      "tags": [
        {
          "name": "v1.4.3+"
        }
      ]
    },
    {
      "name": "blockchain.address.get_history",
      "summary": "Get address history",
      "description": "Return the confirmed and unconfirmed history of a Bitcoin Cash address.",
      "params": [
        {
          "$ref": "#/components/schemas/Address"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/TransactionHistory"
      },
      "examples": [
        {
          "name": "Check some old coinbase",
          "params": [
            {
              "name": "blockchain.address.get_history",
              "value": "qqalnrnlvw50hyy8r3r536nhxwd580unjv9kg5wnhc"
            }
          ],
          "result": {
            "name": "blockchain.address.get_history",
            "value": [
              [
                {
                  "height": 200004,
                  "tx_hash": "acc3758bd2a26f869fcc67d48ff30b96464d476bca82c1cd6656e7d506816412"
                },
                {
                  "height": 215008,
                  "tx_hash": "f3e1bf48975b8d6060a9de8884296abb80be618dc00ae3cb2f6cee3085e09403"
                }
              ]
            ]
          }
        },
        {
          "name": "See what the memo `memo` address is doing ",
          "params": [
            {
              "name": "blockchain.address.get_history",
              "value": "qzdxp2z5yuxzlskafh2d8wsq7grg7rt46csg3qcn80"
            }
          ],
          "result": {
            "name": "blockchain.address.get_history",
            "value": [
              [
                {
                  "...": "confirmed truncated"
                },
                {
                  "height": 652439,
                  "tx_hash": "f49740a25351e794ed1fbc92550782c1f65daf97c3251f1a97263f73e0b9f80a"
                },
                {
                  "height": 652439,
                  "tx_hash": "fcde04d79392a8b5875d3e65dfd5471d4f09c94ca8978a0c5f1742ca090f1600"
                },
                {
                  "fee": 192,
                  "height": 0,
                  "tx_hash": "2d581a4da53feab2f541c6b664a5051b034dd0925a90e77b5f487f9ae85d95bb"
                },
                {
                  "fee": 308,
                  "height": -1,
                  "tx_hash": "5571112ae7de5f1305e93f4da1fcc88ab6f1b8fe4db45a16c581a2ad92f61a38"
                }
              ]
            ]
          }
        }
      ],
      "tags": [
        {
          "name": "v1.4.3+"
        }
      ]
    },
    {
      "name": "blockchain.address.get_mempool",
      "summary": "Get mempool transactions by address",
      "description": "Return the unconfirmed transactions of a Bitcoin Cash address.",
      "params": [
        {
          "$ref": "#/components/schemas/Address"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/MempoolTransactions"
      },
      "examples": [
        {
          "name": "blockchain.address.get_mempool",
          "params": [
            {
              "name": "blockchain.address.get_mempool",
              "value": "qp6e6enhpy0fwwu06ru0c9lywa7nkvlr8rgllz8st5"
            }
          ],
          "result": {
            "name": "blockchain.address.get_mempool",
            "value": [
              {
                "fee": 416,
                "height": 0,
                "tx_hash": "fc1e4a2365e3bf2fe6a20ab23731b1deba2789d40c092a2d55ea0242a50b6f08"
              }
            ]
          }
        }
      ],
      "tags": [
        {
          "name": "v1.4.3+"
        }
      ]
    },
    {
      "name": "blockchain.address.get_scripthash",
      "summary": "Get an address scripthash",
      "description": "Translate a Bitcoin Cash address to a script_hash. This method is potentially useful for clients preferring to work with script hashes but lacking the local libraries necessary to generate them.",
      "params": [
        {
          "$ref": "#/components/schemas/Address"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/ScriptHash"
      },
      "tags": [
        {
          "name": "v1.4.3+"
        }
      ]
    },
    {
      "name": "blockchain.address.listunspent",
      "summary": "Get unspet outputs by address",
      "description": "Return an ordered list of UTXOs sent to a Bitcoin Cash address.",
      "params": [
        {
          "$ref": "#/components/schemas/Address"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/UnspentOutputs"
      },
      "examples": [
        {
          "name": "blockchain.address.listunspent",
          "params": [
            {
              "name": "blockchain.address.listunspent",
              "value": "qzflnqmhzzvuqdcpaxqks4welm8j3ggs9s9px4z3qr"
            }
          ],
          "result": {
            "name": "blockchain.address.listunspent",
            "value": [
              {
                "tx_pos": 0,
                "value": 45318048,
                "tx_hash": "9f2c45a12db0144909b5db269415f7319179105982ac70ed80d76ea79d923ebf",
                "height": 437146
              },
              {
                "tx_pos": 0,
                "value": 919195,
                "tx_hash": "3d2290c93436a3e964cfc2f0950174d8847b1fbe3946432c4784e168da0f019f",
                "height": 441696
              }
            ]
          }
        }
      ],
      "tags": [
        {
          "name": "v1.4.3+"
        }
      ]
    },
    {
      "name": "blockchain.address.subscribe",
      "summary": "Subscribe to an address stream",
      "description": "Subscribe to a Bitcoin Cash address.",
      "params": [
        {
          "$ref": "#/components/schemas/Address"
        }
      ],
      "result": {
        "name": "TODO",
        "schema": {
          "ref": "#/components/schemas/Null"
        }
      },
      "tags": [
        {
          "name": "v1.4.3+"
        }
      ]
    },
    {
      "name": "blockchain.address.unsubscribe",
      "summary": "Unsubscribe from an address stream",
      "description": "Unsubscribe from a Bitcoin Cash address, preventing future notifications if its status changes.",
      "params": [
        {
          "$ref": "#/components/schemas/Address"
        }
      ],
      "result": {
        "name": "TODO",
        "schema": {
          "ref": "#/components/schemas/Null"
        }
      }
    },
    {
      "name": "blockchain.block.header",
      "summary": "Get a block header",
      "description": "Return the block header at the given height.",
      "params": [
        {
          "$ref": "#/components/schemas/Integer"
        }
      ],
      "result": {
        "name": "TODO",
        "schema": {
          "ref": "#/components/schemas/Null"
        }
      },
      "tags": [
        {
          "name": "v1.2+"
        }
      ]
    },
    {
      "name": "blockchain.block.headers",
      "summary": "Get a chunk of headers",
      "description": "Return a concatenated chunk of block headers from the main chain.",
      "params": [],
      "result": {
        "name": "TODO",
        "schema": {
          "ref": "#/components/schemas/Null"
        }
      }
    },
    {
      "name": "blockchain.estimatefee",
      "summary": "Get a current fee estimate",
      "description": "Return the estimated transaction fee per kilobyte for a transaction to be confirmed within a certain number of blocks.",
      "params": [],
      "result": {
        "name": "TODO",
        "schema": {
          "ref": "#/components/schemas/Null"
        }
      }
    },
    {
      "name": "blockchain.headers.subscribe",
      "summary": "Subscribe to headers",
      "description": "Subscribe to receive block headers when a new block is found.",
      "params": [],
      "result": {
        "name": "TODO",
        "schema": {
          "ref": "#/components/schemas/Null"
        }
      }
    },
    {
      "name": "blockchain.relayfee",
      "summary": "Get minimum fee estimate",
      "description": "Return the minimum fee a low-priority transaction must pay in order to be accepted to the daemon's memory pool.",
      "params": [],
      "result": {
        "name": "TODO",
        "schema": {
          "ref": "#/components/schemas/Null"
        }
      }
    },
    {
      "name": "blockchain.scripthash.get_balance",
      "summary": "Get balance by scripthash",
      "description": "Return the confirmed and unconfirmed balances of a :ref:`script hash <script hashes>`.",
      "params": [],
      "result": {
        "$ref": "#/components/contentDescriptors/ScriptHash"
      },
      "tags": [
        {
          "name": "v1.1+"
        }
      ]
    },
    {
      "name": "blockchain.scripthash.get_history",
      "summary": "Get transaction history scripthash",
      "description": "Return the confirmed and unconfirmed history of a Bitcoin Cash address.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/ScriptHash"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/TransactionHistory"
      },
      "examples": [
        {
          "name": "Check some old coinbase",
          "params": [
            {
              "name": "blockchain.scripthash.get_history",
              "value": "TODO"
            }
          ],
          "result": {
            "name": "blockchain.scripthash.get_history",
            "value": [
              [
                {
                  "height": 200004,
                  "tx_hash": "acc3758bd2a26f869fcc67d48ff30b96464d476bca82c1cd6656e7d506816412"
                },
                {
                  "height": 215008,
                  "tx_hash": "f3e1bf48975b8d6060a9de8884296abb80be618dc00ae3cb2f6cee3085e09403"
                }
              ]
            ]
          }
        },
        {
          "name": "See what the memo is `memo`ing",
          "params": [
            {
              "name": "blockchain.scripthash.get_history",
              "value": "TODO"
            }
          ],
          "result": {
            "name": "blockchain.scripthash.get_history",
            "value": [
              [
                {
                  "...": "confirmed truncated"
                },
                {
                  "height": 652439,
                  "tx_hash": "f49740a25351e794ed1fbc92550782c1f65daf97c3251f1a97263f73e0b9f80a"
                },
                {
                  "height": 652439,
                  "tx_hash": "fcde04d79392a8b5875d3e65dfd5471d4f09c94ca8978a0c5f1742ca090f1600"
                },
                {
                  "fee": 192,
                  "height": 0,
                  "tx_hash": "2d581a4da53feab2f541c6b664a5051b034dd0925a90e77b5f487f9ae85d95bb"
                },
                {
                  "fee": 308,
                  "height": -1,
                  "tx_hash": "5571112ae7de5f1305e93f4da1fcc88ab6f1b8fe4db45a16c581a2ad92f61a38"
                }
              ]
            ]
          }
        }
      ],
      "tags": [
        {
          "name": "v1.1+"
        }
      ]
    },
    {
      "name": "blockchain.scripthash.get_mempool",
      "summary": "Get mempool transactions by script hash",
      "description": "Return the unconfirmed transactions of a script hash.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/ScriptHash"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/MempoolTransactions"
      },
      "tags": [
        {
          "name": "v1.1+"
        }
      ]
    },
    {
      "name": "blockchain.scripthash.listunspent",
      "summary": "Get unspent outputs by script hash",
      "description": "Return an ordered list of UTXOs sent to a script hash.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/ScriptHash"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/UnspentOutputs"
      },
      "examples": [
        {
          "name": "blockchain.scripthash.listunspent",
          "params": [
            {
              "name": "blockchain.scripthash.listunspent",
              "value": "302fc274f9573e1526ff7c3ebe45074ecf10ccd2164da54120336c4c5f47192d"
            }
          ],
          "result": {
            "name": "blockchain.scripthash.listunspent",
            "value": [
              {
                "tx_pos": 0,
                "value": 45318048,
                "tx_hash": "9f2c45a12db0144909b5db269415f7319179105982ac70ed80d76ea79d923ebf",
                "height": 437146
              },
              {
                "tx_pos": 0,
                "value": 919195,
                "tx_hash": "3d2290c93436a3e964cfc2f0950174d8847b1fbe3946432c4784e168da0f019f",
                "height": 441696
              }
            ]
          }
        }
      ],
      "tags": [
        {
          "name": "v1.1+"
        }
      ]
    },
    {
      "name": "blockchain.scripthash.subscribe",
      "summary": "Subscribe to a script hash stream.",
      "description": "The client will receive a notification when the `status` of the script hash changes.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/ScriptHash"
        }
      ],
      "result": {
        "name": "TODO",
        "schema": {
          "ref": "#/components/schemas/Null"
        }
      },
      "tags": [
        {
          "name": "v1.1+"
        }
      ]
    },
    {
      "name": "blockchain.scripthash.unsubscribe",
      "summary": "Unsubscribe from a script hash stream.",
      "description": "Unsubscribe from a script hash, preventing future notifications if its `status` changes.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/ScriptHash"
        }
      ],
      "result": {
        "name": "TODO",
        "schema": {
          "ref": "#/components/schemas/Null"
        }
      },
      "tags": [
        {
          "name": "v1.4.2+"
        }
      ]
    },
    {
      "name": "blockchain.transaction.broadcast",
      "summary": "Broadcast a transaction to the network.",
      "description": "**Note** protocol version 1.0 (only) does not respond according to the JSON RPC specification if an error occurs.  If the daemon rejects the transaction, the result is the error message string from the daemon, as if the call were successful.  The client needs to determine if an error occurred by comparing the result to the expected transaction hash.",
      "params": [],
      "result": {
        "name": "TODO",
        "schema": {
          "ref": "#/components/schemas/Null"
        }
      }
    },
    {
      "name": "blockchain.transaction.get",
      "summary": "Get a raw transaction.",
      "params": [],
      "result": {
        "name": "TODO",
        "schema": {
          "ref": "#/components/schemas/Null"
        }
      }
    },
    {
      "name": "blockchain.transaction.get_merkle",
      "summary": "Get the merkle proof for a transaction",
      "description": "Return the merkle branch to a confirmed transaction given its hash and height.",
      "params": [],
      "result": {
        "name": "TODO",
        "schema": {
          "ref": "#/components/schemas/Null"
        }
      }
    },
    {
      "name": "blockchain.transaction.id_from_pos",
      "summary": "Get a transaction (with proof) by block and position",
      "description": "Return a transaction hash and optionally a merkle proof, given a block height and a position in the block.",
      "params": [],
      "result": {
        "name": "TODO",
        "schema": {
          "ref": "#/components/schemas/Null"
        }
      },
      "tags": [
        {
          "name": "v1.4+"
        }
      ]
    },
    {
      "name": "mempool.get_fee_histogram",
      "summary": "Get the fee histogram",
      "description": "Return a histogram of the fee rates paid by transactions in the memory pool, weighted by transaction size.",
      "params": [],
      "result": {
        "name": "TODO",
        "schema": {
          "ref": "#/components/schemas/Null"
        }
      },
      "tags": [
        {
          "name": "v1.2+"
        }
      ]
    },
    {
      "name": "server.add_peer",
      "summary": "Announce a server",
      "description": "A newly-started server uses this call to get itself into other servers' peers lists.  It **SHOULD NOT** be used by wallet clients.",
      "params": [],
      "result": {
        "name": "TODO",
        "schema": {
          "ref": "#/components/schemas/Null"
        }
      },
      "tags": [
        {
          "name": "v1.1+"
        }
      ]
    },
    {
      "name": "server.banner",
      "summary": "Show the console banner",
      "description": "Return a banner to be shown in the Electrum console.",
      "params": [],
      "result": {
        "name": "TODO",
        "schema": {
          "ref": "#/components/schemas/Null"
        }
      }
    },
    {
      "name": "server.donation_address",
      "summary": "Get the server donation address",
      "description": "Return a server donation address.",
      "params": [],
      "result": {
        "name": "TODO",
        "schema": {
          "ref": "#/components/schemas/Null"
        }
      }
    },
    {
      "name": "server.features",
      "summary": "Get the server features",
      "description": "Return a list of features and services supported by the server.",
      "params": [],
      "result": {
        "name": "TODO",
        "schema": {
          "ref": "#/components/schemas/Null"
        }
      }
    },
    {
      "name": "server.peers.subscribe",
      "summary": "Get a list of server peers",
      "description": "Return a list of peer servers.  Despite the name this is not a subscription and the server must send no notifications.",
      "params": [],
      "result": {
        "name": "TODO",
        "schema": {
          "ref": "#/components/schemas/Null"
        }
      }
    },
    {
      "name": "server.ping",
      "summary": "Ping the server",
      "description": "Ping the server to ensure it is responding, and to keep the session alive.  The server may disconnect clients that have sent no requests for roughly 10 minutes.",
      "params": [],
      "result": {
        "name": "a null pong",
        "schema": {
          "title": "pong",
          "type": "null"
        }
      },
      "tags": [
        {
          "name": "v1.2+"
        }
      ]
    },
    {
      "name": "server.version",
      "summary": "Get the server version",
      "description": "Identify the client to the server and negotiate the protocol version. Only the first `server.version` message is accepted.",
      "params": [
        {
          "name": "client_version",
          "required": false,
          "summary": "String describing the client software",
          "schema": {
            "$ref": "#/components/schemas/ClientVersion"
          }
        },
        {
          "name": "protocol_version",
          "required": false,
          "summary": "[min,max] compatible versions, or string of one version",
          "schema": {
            "$ref": "#/components/schemas/ProtocolCompatibility"
          }
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/ServerVersionResponse"
      },
      "examples": [
        {
          "name": "Check the server version",
          "params": [
            {
              "name": "server.version",
              "value": [
                "Open-Rpc Playground",
                [
                  "1.4",
                  "1.5"
                ]
              ]
            }
          ],
          "result": {
            "name": "server.version",
            "value": [
              "Fulcrum 1.2.10",
              "1.4"
            ]
          }
        }
      ]
    }
  ],
  "components": {
    "schemas": {
      "Nonce": {
        "title": "nonce",
        "description": "A number only to be used once",
        "type": "integer"
      },
      "Null": {
        "title": "null",
        "type": "null",
        "description": "Null"
      },
      "Integer": {
        "title": "integer",
        "type": "integer"
      },
      "Address": {
        "$ref": "#/components/contentDescriptors/Address"
      },
      "ClientVersion": {
        "title": "client version",
        "type": "string",
        "description": "Name of the software and current client version"
      },
      "ServerVersion": {
        "title": "server version",
        "type": "string",
        "description": "Name of the server software and running version"
      },
      "ProtocolVersion": {
        "title": "protocol version",
        "type": "string",
        "pattern": "^[0-9].[0-9]$",
        "enum": [
          "1.1",
          "1.2",
          "1.3",
          "1.4"
        ],
        "description": "Protocol major and minor version"
      },
      "ProtocolCompatibility": {
        "title": "compatible version(s)",
        "oneOf": [
          {
            "title": "A single version",
            "type": "string",
            "pattern": "^[0-9].[0-9]$",
            "description": "If protocol_min and protocol_max are the same, they can be passed as a single string rather than as an array of two strings."
          },
          {
            "type": "array",
            "title": "Version Range",
            "maxItems": 2,
            "minItems": 2,
            "description": "An array [protocol_min, protocol_max], each of which is a string.",
            "items": {
              "$ref": "#/components/schemas/ProtocolVersion"
            }
          }
        ]
      },
      "ConfirmedTransaction": {
        "title": "Confirmed transaction",
        "type": "object",
        "required": [
          "height",
          "tx_hash"
        ],
        "properties": {
          "height": {
            "$ref": "#/components/schemas/Integer",
            "description": "The integer height of the block the transaction was confirmed in."
          },
          "tx_hash": {
            "$ref": "#/components/schemas/TransactionHash"
          }
        }
      },
      "MempoolTransaction": {
        "title": "Mempool transaction",
        "type": "object",
        "required": [
          "height",
          "tx_hash",
          "fee"
        ],
        "properties": {
          "height": {
            "type": "integer",
            "description": "`0` if all inputs are confirmed, and `-1` otherwise."
          },
          "tx_hash": {
            "$ref": "#/components/schemas/TransactionHash"
          },
          "fee": {
            "type": "integer",
            "description": "The transaction fee in minimum coin units (satoshis)."
          }
        }
      },
      "TransactionHash": {
        "description": "Transaction Hash",
        "type": "string",
        "pattern": "[0-9A-Fa-f]{64}",
        "example": "0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098"
      },
      "UnspentOutput": {
        "title": "Unspent Transaction Output",
        "type": "object",
        "required": [
          "height",
          "tx_pos",
          "tx_hash",
          "value"
        ],
        "properties": {
          "height": {
            "type": "integer",
            "description": "The integer height of the block the transaction was confirmed in. `0` if the transaction is in the mempool."
          },
          "tx_hash": {
            "$ref": "#/components/schemas/TransactionHash"
          },
          "tx_pos": {
            "type": "integer",
            "description": "The zero-based index of the output in the transaction's list of outputs."
          },
          "value": {
            "type": "integer",
            "description": "The amount in satoshis."
          }
        }
      }
    },
    "contentDescriptors": {
      "MempoolTransactions": {
        "name": "Mempool Transactions",
        "summary": "Transactions not yet included in a block",
        "description": "A list of mempool transactions in arbitrary order.",
        "schema": {
          "title": "List of transactions",
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/MempoolTransaction"
          }
        }
      },
      "Balances": {
        "name": "Balances",
        "summary": "Sum of unspent inputs",
        "description": "The confirmed and unconfirmed balance in satoshis",
        "schema": {
          "properties": {
            "confirmed": {
              "type": "integer",
              "description": "Amount included in blocks"
            },
            "unconfirmed": {
              "type": "integer",
              "description": "Amount in mempool"
            }
          },
          "required": [
            "confirmed",
            "unconfirmed"
          ]
        }
      },
      "Address": {
        "name": "Address",
        "required": true,
        "description": "The address as a Cash Address string (with or without prefix). Some server implementations may also support Legacy (base58) addresses but are not required to do so by this specification.",
        "schema": {
          "title": "address",
          "type": "string",
          "required": [],
          "pattern": "((bitcoincash|bchreg|bchtest):)?(q|p)[a-z0-9]{41}",
          "example": "bchtest:qpttdv3qg2usm4nm7talhxhl05mlhms3ys43u76rn0",
          "description": "Big Endian hex string"
        },
        "summary": "A cashaddr passed as a string"
      },
      "ScriptHash": {
        "name": "Scripthash",
        "summary": "Hash of the locking bytes",
        "schema": {
          "title": "sha256",
          "type": "string",
          "pattern": "[a-z0-9]{64}",
          "example": "5f923a2ae63c4de79d21fe806f3686850af2e61b99a174119624073139f394c2",
          "description": "Big Endian hex string"
        },
        "required": true,
        "description": "A script hash is the hash of the binary bytes of the locking script (ScriptPubKey), expressed as a hexadecimal string. The hash function to use is given by the “hash_function” member of server.features() (currently sha256() only). Like for block and transaction hashes, when converting the big-endian binary hash to a hexadecimal string the least-significant byte appears first, and the most-significant byte last."
      },
      "ServerVersionResponse": {
        "name": "Server Version Response",
        "summary": "The type of server software and protocol compatibility",
        "schema": {
          "type": "array",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerVersion"
              },
              {
                "$ref": "#/components/schemas/ProtocolCompatibility"
              }
            ]
          }
        }
      },
      "TransactionHistory": {
        "name": "Transaction History",
        "summary": "List of confirmed and unconfirmed transactions",
        "description": "A list of confirmed transactions in blockchain order, with the output of Unconfirmed Transactions appended to the list.",
        "schema": {
          "title": "transactions",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConfirmedTransaction"
              },
              {
                "$ref": "#/components/schemas/MempoolTransaction"
              }
            ]
          }
        }
      },
      "UnspentOutputs": {
        "name": "Unspent Outputs",
        "summary": "List of UTXOs",
        "description": "A list of unspent outputs in blockchain order.  This function takes the mempool into account.  Mempool transactions paying to the address are included at the end of the list in an undefined order. Any output that is spent in the mempool does not appear.",
        "schema": {
          "title": "List of Utxos",
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/UnspentOutput"
          }
        }
      },
      "status": {
        "summary": "SHA256 hash of concatenated transactions",
        "name": "Status",
        "description": "To calculate the status of a script hash (or address): \n\n1. order confirmed transactions to the script hash by increasing height (and position in the block if there are more than one in a block)\n\n2. form a string that is the concatenation of strings 'tx_hash:height:' for each transaction in order, where: tx_hash is the transaction hash in hexadecimal height is the height of the block it is in.\n3. Next, with mempool transactions in any order, append a similar string for those transactions, but where height is -1 if the transaction has at least one unconfirmed input, and 0 if all inputs are confirmed.\n\n4. The status of the script hash is the sha256() hash of the full string expressed as a hexadecimal string, or null if the string is empty because there are no transactions.",
        "schema": {
          "title": "status",
          "type": "string",
          "pattern": "[0-9A-Fa-f]{64}",
          "description": "sha256 hash of concatenated transactions"
        }
      }
    }
  }
}